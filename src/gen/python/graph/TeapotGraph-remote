#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from graph import TeapotGraph
from graph.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  int outDegree(int id)')
  print('  int inDegree(int id)')
  print('   outNeighbors(int id)')
  print('   inNeighbors(int id)')
  print('  int outNeighbor(int id, int i)')
  print('  int inNeighbor(int id, int i)')
  print('  int maxNodeId()')
  print('  int nodeCount()')
  print('  long edgeCount()')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TeapotGraph.Client(protocol)
transport.open()

if cmd == 'outDegree':
  if len(args) != 1:
    print('outDegree requires 1 args')
    sys.exit(1)
  pp.pprint(client.outDegree(eval(args[0]),))

elif cmd == 'inDegree':
  if len(args) != 1:
    print('inDegree requires 1 args')
    sys.exit(1)
  pp.pprint(client.inDegree(eval(args[0]),))

elif cmd == 'outNeighbors':
  if len(args) != 1:
    print('outNeighbors requires 1 args')
    sys.exit(1)
  pp.pprint(client.outNeighbors(eval(args[0]),))

elif cmd == 'inNeighbors':
  if len(args) != 1:
    print('inNeighbors requires 1 args')
    sys.exit(1)
  pp.pprint(client.inNeighbors(eval(args[0]),))

elif cmd == 'outNeighbor':
  if len(args) != 2:
    print('outNeighbor requires 2 args')
    sys.exit(1)
  pp.pprint(client.outNeighbor(eval(args[0]),eval(args[1]),))

elif cmd == 'inNeighbor':
  if len(args) != 2:
    print('inNeighbor requires 2 args')
    sys.exit(1)
  pp.pprint(client.inNeighbor(eval(args[0]),eval(args[1]),))

elif cmd == 'maxNodeId':
  if len(args) != 0:
    print('maxNodeId requires 0 args')
    sys.exit(1)
  pp.pprint(client.maxNodeId())

elif cmd == 'nodeCount':
  if len(args) != 0:
    print('nodeCount requires 0 args')
    sys.exit(1)
  pp.pprint(client.nodeCount())

elif cmd == 'edgeCount':
  if len(args) != 0:
    print('edgeCount requires 0 args')
    sys.exit(1)
  pp.pprint(client.edgeCount())

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
