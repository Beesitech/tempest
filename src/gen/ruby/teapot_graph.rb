#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'graph_types'

module TeapotGraph
  class Client
    include ::Thrift::Client

    def outDegree(id)
      send_outDegree(id)
      return recv_outDegree()
    end

    def send_outDegree(id)
      send_message('outDegree', OutDegree_args, :id => id)
    end

    def recv_outDegree()
      result = receive_message(OutDegree_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'outDegree failed: unknown result')
    end

    def inDegree(id)
      send_inDegree(id)
      return recv_inDegree()
    end

    def send_inDegree(id)
      send_message('inDegree', InDegree_args, :id => id)
    end

    def recv_inDegree()
      result = receive_message(InDegree_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'inDegree failed: unknown result')
    end

    def outNeighbors(id)
      send_outNeighbors(id)
      return recv_outNeighbors()
    end

    def send_outNeighbors(id)
      send_message('outNeighbors', OutNeighbors_args, :id => id)
    end

    def recv_outNeighbors()
      result = receive_message(OutNeighbors_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'outNeighbors failed: unknown result')
    end

    def inNeighbors(id)
      send_inNeighbors(id)
      return recv_inNeighbors()
    end

    def send_inNeighbors(id)
      send_message('inNeighbors', InNeighbors_args, :id => id)
    end

    def recv_inNeighbors()
      result = receive_message(InNeighbors_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'inNeighbors failed: unknown result')
    end

    def outNeighbor(id, i)
      send_outNeighbor(id, i)
      return recv_outNeighbor()
    end

    def send_outNeighbor(id, i)
      send_message('outNeighbor', OutNeighbor_args, :id => id, :i => i)
    end

    def recv_outNeighbor()
      result = receive_message(OutNeighbor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'outNeighbor failed: unknown result')
    end

    def inNeighbor(id, i)
      send_inNeighbor(id, i)
      return recv_inNeighbor()
    end

    def send_inNeighbor(id, i)
      send_message('inNeighbor', InNeighbor_args, :id => id, :i => i)
    end

    def recv_inNeighbor()
      result = receive_message(InNeighbor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'inNeighbor failed: unknown result')
    end

    def maxNodeId()
      send_maxNodeId()
      return recv_maxNodeId()
    end

    def send_maxNodeId()
      send_message('maxNodeId', MaxNodeId_args)
    end

    def recv_maxNodeId()
      result = receive_message(MaxNodeId_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'maxNodeId failed: unknown result')
    end

    def nodeCount()
      send_nodeCount()
      return recv_nodeCount()
    end

    def send_nodeCount()
      send_message('nodeCount', NodeCount_args)
    end

    def recv_nodeCount()
      result = receive_message(NodeCount_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'nodeCount failed: unknown result')
    end

    def edgeCount()
      send_edgeCount()
      return recv_edgeCount()
    end

    def send_edgeCount()
      send_message('edgeCount', EdgeCount_args)
    end

    def recv_edgeCount()
      result = receive_message(EdgeCount_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'edgeCount failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_outDegree(seqid, iprot, oprot)
      args = read_args(iprot, OutDegree_args)
      result = OutDegree_result.new()
      result.success = @handler.outDegree(args.id)
      write_result(result, oprot, 'outDegree', seqid)
    end

    def process_inDegree(seqid, iprot, oprot)
      args = read_args(iprot, InDegree_args)
      result = InDegree_result.new()
      result.success = @handler.inDegree(args.id)
      write_result(result, oprot, 'inDegree', seqid)
    end

    def process_outNeighbors(seqid, iprot, oprot)
      args = read_args(iprot, OutNeighbors_args)
      result = OutNeighbors_result.new()
      result.success = @handler.outNeighbors(args.id)
      write_result(result, oprot, 'outNeighbors', seqid)
    end

    def process_inNeighbors(seqid, iprot, oprot)
      args = read_args(iprot, InNeighbors_args)
      result = InNeighbors_result.new()
      result.success = @handler.inNeighbors(args.id)
      write_result(result, oprot, 'inNeighbors', seqid)
    end

    def process_outNeighbor(seqid, iprot, oprot)
      args = read_args(iprot, OutNeighbor_args)
      result = OutNeighbor_result.new()
      result.success = @handler.outNeighbor(args.id, args.i)
      write_result(result, oprot, 'outNeighbor', seqid)
    end

    def process_inNeighbor(seqid, iprot, oprot)
      args = read_args(iprot, InNeighbor_args)
      result = InNeighbor_result.new()
      result.success = @handler.inNeighbor(args.id, args.i)
      write_result(result, oprot, 'inNeighbor', seqid)
    end

    def process_maxNodeId(seqid, iprot, oprot)
      args = read_args(iprot, MaxNodeId_args)
      result = MaxNodeId_result.new()
      result.success = @handler.maxNodeId()
      write_result(result, oprot, 'maxNodeId', seqid)
    end

    def process_nodeCount(seqid, iprot, oprot)
      args = read_args(iprot, NodeCount_args)
      result = NodeCount_result.new()
      result.success = @handler.nodeCount()
      write_result(result, oprot, 'nodeCount', seqid)
    end

    def process_edgeCount(seqid, iprot, oprot)
      args = read_args(iprot, EdgeCount_args)
      result = EdgeCount_result.new()
      result.success = @handler.edgeCount()
      write_result(result, oprot, 'edgeCount', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class OutDegree_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class OutDegree_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InDegree_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InDegree_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class OutNeighbors_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class OutNeighbors_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InNeighbors_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InNeighbors_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I32}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class OutNeighbor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    I = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'},
      I => {:type => ::Thrift::Types::I32, :name => 'i'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class OutNeighbor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InNeighbor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    I = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'},
      I => {:type => ::Thrift::Types::I32, :name => 'i'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class InNeighbor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MaxNodeId_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MaxNodeId_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NodeCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class NodeCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EdgeCount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class EdgeCount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

